---------------------------
Problem 4
---------------------------
long start = System.currentTimeMillis();
long end = System.currentTimeMillis();
long diff = end - start;
System.out.println("Finish in: " + diff);

reverseString = new StringBuilder(productString).reverse().toString();
if (productString.equals(reverseString))

---------------------------
Problem 5
---------------------------
import java.util.*;
public static ArrayList<Integer> pfs(long n) {
ArrayList<Integer> l = new ArrayList<Integer>();

---------------------------
Problem 8
---------------------------
import static java.nio.file.Files.readAllBytes;
import static java.nio.file.Paths.get;

String str = new String(readAllBytes(get("/home/kevin/Repositories/LearnJava/HelloWorld/src/Problem8.txt")));
str = str.replace("\n", "");
l[i] = Integer.parseInt(str.charAt(i)+"");

---------------------------
Problem 9
---------------------------
System.out.format("a=%d b=%d c=%d\n", a, b, c);

---------------------------
Problem 13
---------------------------
import java.math.BigInteger;
BigInteger[] numbers = new BigInteger[numStrings.length];
BigInteger sum = BigInteger.ZERO;

for (BigInteger number : numbers)
    sum = sum.add(number);

---------------------------
Problem 16
---------------------------
public static void method2() {
    BigInteger num = new BigInteger("2").pow(1000);
    
    BigInteger sum = BigInteger.ZERO;
    BigInteger TEN = new BigInteger("10");
    while (!num.equals(BigInteger.ZERO)) {
        sum = sum.add(num.mod(TEN));
        num = num.divide(TEN);
    }
}

---------------------------
Problem 17
---------------------------
import java.util.HashMap;
import java.util.Map;

public static String toWords(int n) {
    Map<Integer, String> words = new HashMap<Integer, String>() {
        {
            put(1, "one");
            put(2, "two");
            put(3, "three");
            put(4, "four");
            put(5, "five");
            put(6, "six");
            put(7, "seven");
            put(8, "eight");
            put(9, "nine");
            put(10, "ten");
            put(11, "eleven");
            put(12, "twelve");
            put(13, "thirteen");
            put(14, "fourteen");
            put(15, "fifteen");
            put(16, "sixteen");
            put(17, "seventeen");
            put(18, "eighteen");
            put(19, "nineteen");
            put(20, "twenty");
            put(30, "thirty");
            put(40, "forty");
            put(50, "fifty");
            put(60, "sixty");
            put(70, "seventy");
            put(80, "eighty");
            put(90, "ninety");
            put(1000, "one thousand");
        }
    };
    
    if (words.containsKey(n))
        return words.get(n);

---------------------------
Problem 18
---------------------------
String[] list = str.split("\\s");

ArrayList<ArrayList<Integer>> grid = new ArrayList<ArrayList<Integer>>();
int index = 0;
for (int j = 0; j < 15; j++) {
    ArrayList<Integer> line = new ArrayList<Integer>();
    for (int k = 0; k < j + 1; k++) {
        line.add(triangle[index]);
        index++;
    }
    grid.add(line);
}

ArrayList<Node> nodes = new ArrayList<Node>();
nodes.add(new Node(grid.get(0).get(0), 0, 0));
while (nodes.get(0).i() < 14) {
    ArrayList<Node> newNodes = new ArrayList<Node>();
    for (Node node: nodes) {
        int i = node.i();
        int j = node.j();
        Node left = new Node(node.sum()+grid.get(i+1).get(j), i+1, j);
        Node right = new Node(node.sum()+grid.get(i+1).get(j+1), i+1, j+1);
        newNodes.add(left);
        newNodes.add(right);
    }
    
    nodes = newNodes;
}

---------------------------
Problem 19
---------------------------
implementing Python Yield

---------------------------
Problem 20
---------------------------
BigInteger f100 = new BigInteger("1");
for (int i = 2; i <= 100; i++)
    f100 = f100.multiply(BigInteger.valueOf(i));

for (int i = 0; i < str.length(); i++)
    digits[i] = Integer.parseInt(str.charAt(i) + "");
